// Copyright 2019-2020 Parity Technologies (UK) Ltd.
// This file is part of Parity Bridges Common.

// Parity Bridges Common is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity Bridges Common is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity Bridges Common.  If not, see <http://www.gnu.org/licenses/>.

use crate::ethereum_client::{EthereumConnectionParams, EthereumSigningParams, self};
use crate::substrate_client::{SubstrateConnectionParams, self};
use crate::substrate_types::{Hash as SubstrateHash, Header as SubstrateHeader};
use codec::{Decode, Encode};
use num_traits::Zero;

/// Ethereum synchronization parameters.
#[derive(Debug)]
pub struct EthereumDeployContractParams {
	/// Ethereum connection params.
	pub eth: EthereumConnectionParams,
	/// Ethereum signing params.
	pub eth_sign: EthereumSigningParams,
	/// Ethereum contract bytecode.
	pub eth_contract_code: Vec<u8>,
	/// Substrate connection params.
	pub sub: SubstrateConnectionParams,
	/// Initial authorities set id.
	pub sub_initial_authorities_set_id: Option<u64>,
	/// Initial authorities set.
	pub sub_initial_authorities_set: Option<Vec<u8>>,
	/// Initial header.
	pub sub_initial_header: Option<Vec<u8>>,
}

impl Default for EthereumDeployContractParams {
	fn default() -> Self {
		EthereumDeployContractParams {
			eth: Default::default(),
			eth_sign: Default::default(),
			// compiler: 0.6.6+commit.6c089d02 + optimization
			eth_contract_code: hex::decode("60806040523480156200001157600080fd5b5060405162000dfa38038062000dfa833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b506040818152602083015192018051929491939192846401000000008211156200010f57600080fd5b9083019060208201858111156200012557600080fd5b82516401000000008111828201881017156200014057600080fd5b82525081516020918201929091019080838360005b838110156200016f57818101518382015260200162000155565b50505050905090810190601f1680156200019d5780820380516001836020036101000a031916815260200191505b50604052505050620001ae620003d4565b620001c2846001600160e01b03620002dc16565b805160008181556002918255604080840180516001908155825160e08101845281815260208088015181830190815293518286019081526080808a0151606085019081526001600160401b038e169185019190915260a0840188905260c084018890528951885260058352959096208251815460ff191690151517815593519284019290925593519482019490945590518051949550919390926200026f92600385019291019062000409565b506080820151600482810180546001600160401b03199081166001600160401b039485161790915560a0850151600585015560c09094015160069093019290925560038054909316908616179091558251620002d19190602085019062000409565b5050505050620004ae565b620002e6620003d4565b600080600080600060608751602089016040516020810160208101602081016020810160a08588886010600019fa6200031e57600080fd5b93519251915190519351929b50909950975090955093505082159050620003a757816001600160401b03811180156200035657600080fd5b506040519080825280601f01601f19166020018201604052801562000382576020820181803683370190505b50905087516020890160208301848184846011600019fa620003a357600080fd5b5050505b6040805160a081018252968752602087019590955293850192909252606084015250608082015292915050565b6040518060a0016040528060008019168152602001600080191681526020016000815260200160008152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200044c57805160ff19168380011785556200047c565b828001600101855582156200047c579182015b828111156200047c5782518255916020019190600101906200045f565b506200048a9291506200048e565b5090565b620004ab91905b808211156200048a576000815560010162000495565b90565b61093c80620004be6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063871ebe181461005c578063a98bfaad1461008d578063d96a2deb146100aa578063e7af0779146100cb578063fae71ae814610173575b600080fd5b6100796004803603602081101561007257600080fd5b5035610225565b604080519115158252519081900360200190f35b610079600480360360208110156100a357600080fd5b503561023a565b6100b2610297565b6040805192835260208301919091528051918290030190f35b610171600480360360208110156100e157600080fd5b8101906020810181356401000000008111156100fc57600080fd5b82018360208201111561010e57600080fd5b8035906020019184600183028401116401000000008311171561013057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102af945050505050565b005b6101716004803603606081101561018957600080fd5b8135916020810135918101906060810160408201356401000000008111156101b057600080fd5b8201836020820111156101c257600080fd5b803590602001918460018302840111640100000000831117156101e457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610521945050505050565b60009081526005602052604090205460ff1690565b6000818152600560205260408120805460ff16801561025e57506001548160020154115b8015610271575080600601548160020154145b80156102905750600354600482015467ffffffffffffffff9081169116145b9392505050565b60008054808252600560205260409091206002015491565b6102b761073b565b6102c08261063f565b905060006005600083602001518152602001908152602001600020905060018260400151038160020154146103265760405162461bcd60e51b81526004018080602001828103825260268152602001806108816026913960400191505060405180910390fd5b600681015415801590610340575080600201548160060154145b15610389578160200151600254146103895760405162461bcd60e51b81526004018080602001828103825260318152602001806108d66031913960400191505060405180910390fd5b6006810154608083015151156103fe57826040015181106103f1576040805162461bcd60e51b815260206004820152601960248201527f4f7665726c617070696e67207369676e616c7320666f756e6400000000000000604482015290519081900360640190fd5b5060608201516040830151015b60048201546005830154600384015467ffffffffffffffff90921691600260001960018316156101000201909116041561043f575060208401516001909101905b6040805160e0810182526001808252602088810151818401908152898501518486019081526080808c01516060870190815267ffffffffffffffff8a169187019190915260a0860188905260c086018a90528b51600090815260058552969096208551815460ff19169015151781559151938201939093559151600283015592518051929391926104d69260038501920190610770565b50608082015160048201805467ffffffffffffffff191667ffffffffffffffff90921691909117905560a0820151600582015560c09091015160069091015550509151600055505050565b60008281526005602052604090206002015483146105705760405162461bcd60e51b815260040180806020018281038252602f8152602001806108a7602f913960400191505060405180910390fd5b6002546000610580858585610731565b600081815260056020526040902060028281558101546001559091505b828214610637575060009081526005602052604090206001810154600682015460028301549192911415610632576005818101546000908152602091909152604090206003805467ffffffffffffffff198116600167ffffffffffffffff9283168101909216178255908201805461062b9260049291600261010092821615929092026000190116046107ee565b5050610637565b61059d565b505050505050565b61064761073b565b600080600080600060608751602089016040516020810160208101602081016020810160a08588886010600019fa61067e57600080fd5b93519251915190519351929b50909950975090955093505082159050610704578167ffffffffffffffff811180156106b557600080fd5b506040519080825280601f01601f1916602001820160405280156106e0576020820181803683370190505b50905087516020890160208301848184846011600019fa61070057600080fd5b5050505b6040805160a081018252968752602087019590955293850192909252606084015250608082015292915050565b6002549392505050565b6040518060a0016040528060008019168152602001600080191681526020016000815260200160008152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106107b157805160ff19168380011785556107de565b828001600101855582156107de579182015b828111156107de5782518255916020019190600101906107c3565b506107ea929150610863565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061082757805485556107de565b828001600101855582156107de57600052602060002091601f016020900482015b828111156107de578254825591600101919060010190610848565b61087d91905b808211156107ea5760008155600101610869565b9056fe4d697373696e6720706172656e74206865616465722066726f6d207468652073746f726167654d697373696e672066696e616c69747920746172676574206865616465722066726f6d207468652073746f726167654d697373696e672072657175697265642066696e616c6974792070726f6f6620666f7220706172656e7420686561646572a2646970667358221220920ca01b59940884722a766076b4f1d1d825eba446e530980bd310f776703dad64736f6c63430006060033")
				.expect("code is hardcoded, thus valid; qed"),
			sub: Default::default(),
			sub_initial_authorities_set_id: None,
			sub_initial_authorities_set: None,
			sub_initial_header: None,
		}
	}
}

/// Deploy Bridge contract on Ethereum chain.
pub fn run(params: EthereumDeployContractParams) {
	let mut local_pool = futures::executor::LocalPool::new();

	let result = local_pool.run_until(async move {
		let eth_client = ethereum_client::client(params.eth);
		let sub_client = substrate_client::client(params.sub);

		let (sub_client, initial_header) = prepare_initial_header(sub_client, params.sub_initial_header).await;
		let (initial_header_hash, initial_header) = initial_header?;
		let initial_set_id = params.sub_initial_authorities_set_id.unwrap_or(0);
		let (_, initial_set) = prepare_initial_authorities_set(
			sub_client,
			initial_header_hash,
			params.sub_initial_authorities_set,
		).await;
		let initial_set = initial_set?;

		log::info!(
			target: "bridge",
			"Deploying Ethereum contract.\r\n\tInitial header: {}\r\n\tInitial authorities set ID: {}\r\n\tInitial authorities set: {}",
			hex::encode(&initial_header),
			initial_set_id,
			hex::encode(&initial_set),
		);

		ethereum_client::deploy_bridge_contract(
			eth_client,
			&params.eth_sign,
			params.eth_contract_code,
			initial_header,
			initial_set_id,
			initial_set,
		).await.1.map_err(|error| format!("Error deploying contract: {:?}", error))
	});

	if let Err(error) = result {
		log::error!(target: "bridge", "{}", error);
	}
}

/// Prepare initial header.
async fn prepare_initial_header(
	sub_client: substrate_client::Client,
	sub_initial_header: Option<Vec<u8>>,
) -> (substrate_client::Client, Result<(SubstrateHash, Vec<u8>), String>) {
	match sub_initial_header {
		Some(raw_initial_header) => {
			match SubstrateHeader::decode(&mut &raw_initial_header[..]) {
				Ok(initial_header) => (sub_client, Ok((initial_header.hash(), raw_initial_header))),
				Err(error) => (sub_client, Err(format!("Error decoding initial header: {}", error))),
			}
		},
		None => {
			let (sub_client, initial_header) = substrate_client::header_by_number(
				sub_client,
				Zero::zero(),
			).await;
			(
				sub_client,
				initial_header
					.map(|header| (header.hash(), header.encode()))
					.map_err(|error| format!("Error reading Substrate genesis header: {:?}", error))
			)
		},
	}
}

/// Prepare initial GRANDPA authorities set.
async fn prepare_initial_authorities_set(
	sub_client: substrate_client::Client,
	sub_initial_header_hash: SubstrateHash,
	sub_initial_authorities_set: Option<Vec<u8>>,
) -> (substrate_client::Client, Result<Vec<u8>, String>) {
	let (sub_client, initial_authorities_set) = match sub_initial_authorities_set {
		Some(initial_authorities_set) => (sub_client, Ok(initial_authorities_set)),
		None => substrate_client::grandpa_authorities_set(
			sub_client,
			sub_initial_header_hash,
		).await,
	};

	(
		sub_client,
		initial_authorities_set
			.map_err(|error| format!("Error reading GRANDPA authorities set: {:?}", error)),
	)
}
