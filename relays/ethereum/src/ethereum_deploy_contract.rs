// Copyright 2019-2020 Parity Technologies (UK) Ltd.
// This file is part of Parity Bridges Common.

// Parity Bridges Common is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity Bridges Common is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity Bridges Common.  If not, see <http://www.gnu.org/licenses/>.

use crate::ethereum_client;
use crate::ethereum_types::U256;
use crate::substrate_client;
use crate::substrate_types::{Hash as SubstrateHash, Header as SubstrateHeader};
use codec::{Decode, Encode};
use num_traits::Zero;
use parity_crypto::publickey::KeyPair;

/// Ethereum synchronization parameters.
#[derive(Debug)]
pub struct EthereumDeployContractParams {
	/// Ethereum RPC host.
	pub eth_host: String,
	/// Ethereum RPC port.
	pub eth_port: u16,
	/// Ethereum chain id.
	pub eth_chain_id: u64,
	/// Ethereum transactions signer.
	pub eth_signer: KeyPair,
	/// Gas price we agree to pay.
	pub eth_gas_price: U256,
	/// Ethereum contract bytecode.
	pub eth_contract_code: Vec<u8>,
	/// Substrate RPC host.
	pub sub_host: String,
	/// Substrate RPC port.
	pub sub_port: u16,
	/// Initial authorities set id.
	pub sub_initial_authorities_set_id: Option<u64>,
	/// Initial authorities set.
	pub sub_initial_authorities_set: Option<Vec<u8>>,
	/// Initial header.
	pub sub_initial_header: Option<Vec<u8>>,
}

impl Default for EthereumDeployContractParams {
	fn default() -> Self {
		EthereumDeployContractParams {
			eth_host: "localhost".into(),
			eth_port: 8545,
			eth_chain_id: 0x11, // Parity dev chain
			// that the account that has a lot of ether when we run instant seal engine
			// address: 0x00a329c0648769a73afac7f9381e08fb43dbea72
			// secret: 0x4d5db4107d237df6a3d58ee5f70ae63d73d7658d4026f2eefd2f204c81682cb7
			eth_signer: KeyPair::from_secret_slice(
				&hex::decode("4d5db4107d237df6a3d58ee5f70ae63d73d7658d4026f2eefd2f204c81682cb7")
					.expect("secret is hardcoded, thus valid; qed"),
			).expect("secret is hardcoded, thus valid; qed"),
			eth_gas_price: 8_000_000_000u64.into(), // 8 Gwei
			eth_contract_code: hex::decode("")
				.expect("code is hardcoded, thus valid; qed"),
			sub_host: "localhost".into(),
			sub_port: 9933,
			sub_initial_authorities_set_id: None,
			sub_initial_authorities_set: None,
			sub_initial_header: None,
		}
	}
}

/// Deploy Bridge contract on Ethereum chain.
pub fn run(params: EthereumDeployContractParams) {
	let mut local_pool = futures::executor::LocalPool::new();

	let result = local_pool.run_until(async move {
		let eth_uri = format!("http://{}:{}", params.eth_host, params.eth_port);
		let eth_client = ethereum_client::client(&eth_uri);

		let sub_uri = format!("http://{}:{}", params.sub_host, params.sub_port);
		let sub_client = substrate_client::client(&sub_uri);

		let (sub_client, initial_header) = prepare_initial_header(sub_client, params.sub_initial_header).await;
		let (initial_header_hash, raw_initial_header) = initial_header?;
		let initial_set_id = params.sub_initial_authorities_set_id.unwrap_or(0);
		let (_, initial_set) = prepare_initial_authorities_set(
			sub_client,
			initial_header_hash,
			params.sub_initial_authorities_set,
		).await;
		let initial_set = initial_set?;

		log::info!(
			target: "bridge",
			"Deploying Ethereum contract.\r\n\tInitial header: {}\r\n\tInitial authorities set ID: {}\r\n\tInitial authorities set: {}",
			hex::encode(&raw_initial_header),
			initial_set_id,
			hex::encode(&initial_set),
		);

		ethereum_client::deploy_bridge_contract(
			eth_client,
			params.eth_signer,
			params.eth_chain_id,
			params.eth_gas_price,
			params.eth_contract_code,
			raw_initial_header,
			initial_set_id,
			initial_set,
		).await.1.map_err(|error| format!("Error deploying contract: {:?}", error))
	});

	if let Err(error) = result {
		log::error!(target: "bridge", "{}", error);
	}
}

/// Prepare initial header.
async fn prepare_initial_header(
	sub_client: substrate_client::Client,
	sub_initial_header: Option<Vec<u8>>,
) -> (substrate_client::Client, Result<(SubstrateHash, Vec<u8>), String>) {
	match sub_initial_header {
		Some(raw_initial_header) => {
			match SubstrateHeader::decode(&mut &raw_initial_header[..]) {
				Ok(initial_header) => (sub_client, Ok((initial_header.hash(), raw_initial_header))),
				Err(error) => (sub_client, Err(format!("Error decoding initial header: {}", error))),
			}
		},
		None => {
			let (sub_client, initial_header) = substrate_client::header_by_number(
				sub_client,
				Zero::zero(),
			).await;
			(
				sub_client,
				initial_header
					.map(|header| (header.hash(), header.encode()))
					.map_err(|error| format!("Error reading Substrate genesis header: {:?}", error))
			)
		},
	}
}

/// Prepare initial GRANDPA authorities set.
async fn prepare_initial_authorities_set(
	sub_client: substrate_client::Client,
	sub_initial_header_hash: SubstrateHash,
	sub_initial_authorities_set: Option<Vec<u8>>,
) -> (substrate_client::Client, Result<Vec<u8>, String>) {
	let (sub_client, initial_authorities_set) = match sub_initial_authorities_set {
		Some(initial_authorities_set) => (sub_client, Ok(initial_authorities_set)),
		None => substrate_client::grandpa_authorities_set(
			sub_client,
			sub_initial_header_hash,
		).await,
	};

	(
		sub_client,
		initial_authorities_set
			.map_err(|error| format!("Error reading GRANDPA authorities set: {:?}", error)),
	)
}
