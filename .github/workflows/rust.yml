name:                  Check, Test and Build Suite

on:
  pull_request:
  push:
    branches:
      - master
      - stable
    tags:
      - v*
    paths-ignore:
      - 'README.md'
jobs:
  check:
    name:              Check
    strategy:
      matrix:
        platform:
          - ubuntu-latest
        #  - macos-latest
        #  - windows-latest
        toolchain:
          - stable
          - beta
          - nightly
        compiler:
          - clang
          - gcc
    runs-on:           ${{ matrix.platform }}
    env:
      RUST_BACKTRACE:  full
    steps:
      - name:          Set default compiler
        if:            matrix.compiler == 'clang' && matrix.platform != 'windows-latest'
        run: |
          echo ::set-env name=CC::clang
          echo ::set-env name=CXX::clang++
      - name:          Install sudo for windows #https://github.com/actions/virtual-environments/issues/572
        if: matrix.platform == 'windows-latest'
        run: choco install sudo
      - name:          Install LLVM for Windows
        if:            matrix.platform == 'windows-latest'  && matrix.compiler == 'clang'
        run:           |
          choco install llvm
          echo ::set-env name=CC::clang-cl.exe --enable-64-bit
          echo ::set-env name=CXX::clang-cl.exe --enable-64-bit
          refreshenv
      - name:          Checkout sources & submodules
        uses:          actions/checkout@master
        with:
          fetch-depth: 5
          submodules:  recursive
      - name:          Install toolchain
        uses:          actions-rs/toolchain@master
        with:
          profile:     minimal
          toolchain:   ${{ matrix.toolchain }}
          components:  clippy, rustfmt
          override:    true
      - name:          Install nightly toolchain & wasm32
        uses:          actions-rs/toolchain@master
        with:
          profile:     minimal
          toolchain:   nightly
          target:      wasm32-unknown-unknown
          components:  clippy, rustfmt
          override:    true
      - name:          Set cache_hash ENV and prepare cache dir's #cargo dirs permission https://github.com/actions/virtual-environments/issues/572
        run:           |
          echo ::set-env name=cache_hash::${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.compiler }}-${{ hashFiles('**/Cargo.toml') }}
          mkdir -p $HOME/sccache
          sudo chmod -R a+w $HOME/.cargo
        shell:         bash
      - name:          Cache cargo registry
        uses:          actions/cache@master
        with:
          path:        $HOME/.cargo/registry
          key:         cargo-registry-${{ env['cache_hash'] }}
      - name:          Cache cargo index
        uses:          actions/cache@master
        with:
          path:        $HOME/.cargo/git
          key:         cargo-git-${{ env['cache_hash'] }}
      - name:          Cache cargo build
        uses:          actions/cache@master
        with:
          path:        target
          key:         cargo-target-${{ env['cache_hash'] }}
      - name:          Cache sccache
        uses:          actions/cache@master
        with:
          path:        "$HOME/sccache"
          key:         sccache-${{ env['cache_hash'] }}
      - name:          Install & start sccache for ${{ matrix.platform }}
        shell:         pwsh
        run:           pwsh .github/workflows/sccache.ps1 ${{ runner.os}}
      - name:          Sccache statistics
        run:           sccache --show-stats
      - name:          Checking ${{ matrix.platform }}-${{ matrix.toolchain }}
        uses:          actions-rs/cargo@master
        with:
          command:     check
          toolchain:   ${{ matrix.toolchain }}
          args:        --all  --verbose
      - name:          Stop sccache
        if:            always()
        run:           sccache --stop-server
  test:
    name:              Test
    needs:             [check]
    strategy:
      matrix:
        platform:
          - ubuntu-latest
        #  - macos-latest
        #  - windows-latest
        toolchain:
          - stable
          - beta
          - nightly
        compiler:
          - clang
          - gcc
    runs-on:           ${{ matrix.platform }}
    env:
      RUST_BACKTRACE:  full
    steps:
      - name:          Set default compiler
        if:            matrix.compiler == 'clang' && matrix.platform != 'windows-latest'
        run: |
          echo ::set-env name=CC::clang
          echo ::set-env name=CXX::clang++
      - name:          Install sudo for windows #https://github.com/actions/virtual-environments/issues/572
        if: matrix.platform == 'windows-latest'
        run: choco install sudo
      - name:          Install LLVM for Windows
        if:            matrix.platform == 'windows-latest'  && matrix.compiler == 'clang'
        run:           |
          choco install llvm
          echo ::set-env name=CC::clang-cl.exe --enable-64-bit
          echo ::set-env name=CXX::clang-cl.exe --enable-64-bit
          refreshenv
      - name:          Checkout sources & submodules
        uses:          actions/checkout@master
        with:
          fetch-depth: 5
          submodules:  recursive
      - name:          Install toolchain
        uses:          actions-rs/toolchain@master
        with:
          profile:     minimal
          toolchain:   ${{ matrix.toolchain }}
          components:  clippy, rustfmt
          override:    true
      - name:          Install nightly toolchain & wasm32
        uses:          actions-rs/toolchain@master
        with:
          profile:     minimal
          toolchain:   nightly
          target:      wasm32-unknown-unknown
          components:  clippy, rustfmt
          override:    true
      - name:          Set cache_hash ENV and prepare cache dir's #cargo dirs permission https://github.com/actions/virtual-environments/issues/572
        run:           |
          echo ::set-env name=cache_hash::${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.compiler }}-${{ hashFiles('**/Cargo.toml') }}
          mkdir -p $HOME/sccache
          sudo chmod -R a+w $HOME/.cargo
        shell:         bash
      - name:          Cache cargo registry
        uses:          actions/cache@master
        with:
          path:        $HOME/.cargo/registry
          key:         cargo-registry-${{ env['cache_hash'] }}
      - name:          Cache cargo index
        uses:          actions/cache@master
        with:
          path:        $HOME/.cargo/git
          key:         cargo-git-${{ env['cache_hash'] }}
      - name:          Cache cargo build
        uses:          actions/cache@master
        with:
          path:        target
          key:         cargo-target-${{ env['cache_hash'] }}
      - name:          Cache sccache
        uses:          actions/cache@master
        with:
          path:        "$HOME/sccache"
          key:         sccache-${{ env['cache_hash'] }}
      - name:          Install & start sccache for ${{ matrix.platform }}
        shell:         pwsh
        run:           pwsh .github/workflows/sccache.ps1 ${{ runner.os}}
      - name:          Sccache statistics
        run:           sccache --show-stats
      - name:          Testing ${{ matrix.platform }}-${{ matrix.toolchain }}
        uses:          actions-rs/cargo@master
        with:
          command:     fmt
          toolchain:   ${{ matrix.toolchain }}
          args:        --all -- --check
      - name:          Testing ${{ matrix.platform }}-${{ matrix.toolchain }}
        uses:          actions-rs/cargo@master
        if:            matrix.toolchain == 'nightly &&'${{ always() }} #Allow failure for nightly
        with:
          command:     test
          toolchain:   ${{ matrix.toolchain }}
          args:        --all  --verbose
      - name:          Stop sccache
        if:            always()
        run:           sccache --stop-server
  build:
    name:              Build
    needs:             [check,test]
    strategy:
      matrix:
        platform:
          - ubuntu-latest
        #  - macos-latest
        #  - windows-latest
        toolchain:
          - stable
          - beta
          - nightly
        compiler:
          - clang
          - gcc
    runs-on:           ${{ matrix.platform }}
    env:
      RUST_BACKTRACE:  full
      # NOTE:          Enables the aes-ni instructions for RustCrypto dependency.
      # Strip binaries
      # If you change this please remember to also update .cargo/config
      RUSTFLAGS:       "-C target-feature=+aes,+sse2,+ssse3 -C link-arg=-s"
    steps:
      - name:          Set default compiler
        if:            matrix.compiler == 'clang' && matrix.platform != 'windows-latest'
        run: |
          echo ::set-env name=CC::clang
          echo ::set-env name=CXX::clang++
      - name:          Install sudo for windows #https://github.com/actions/virtual-environments/issues/572
        if: matrix.platform == 'windows-latest'
        run: choco install sudo
      - name:          Install LLVM for Windows
        if:            matrix.platform == 'windows-latest'  && matrix.compiler == 'clang'
        run:           |
          choco install llvm
          echo ::set-env name=CC::clang-cl.exe --enable-64-bit
          echo ::set-env name=CXX::clang-cl.exe --enable-64-bit
          refreshenv
      - name:          Checkout sources & submodules
        uses:          actions/checkout@master
        with:
          fetch-depth: 5
          submodules:  recursive
      - name:          Install toolchain
        uses:          actions-rs/toolchain@master
        with:
          profile:     minimal
          toolchain:   ${{ matrix.toolchain }}
          components:  clippy, rustfmt
          override:    true
      - name:          Install nightly toolchain & wasm32
        uses:          actions-rs/toolchain@master
        with:
          profile:     minimal
          toolchain:   nightly
          target:      wasm32-unknown-unknown
          components:  clippy, rustfmt
          override:    true
      - name:          Set cache_hash ENV and prepare cache dir's #cargo dirs permission https://github.com/actions/virtual-environments/issues/572
        run:           |
          echo ::set-env name=cache_hash::${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.compiler }}-${{ hashFiles('**/Cargo.toml') }}
          mkdir -p $HOME/sccache
          sudo chmod -R a+w $HOME/.cargo
        shell:         bash
      - name:          Cache cargo registry
        uses:          actions/cache@master
        with:
          path:        $HOME/.cargo/registry
          key:         cargo-registry-${{ env['cache_hash'] }}
      - name:          Cache cargo index
        uses:          actions/cache@master
        with:
          path:        $HOME/.cargo/git
          key:         cargo-git-${{ env['cache_hash'] }}
      - name:          Cache cargo build
        uses:          actions/cache@master
        with:
          path:        target
          key:         cargo-target-${{ env['cache_hash'] }}
      - name:          Cache sccache
        uses:          actions/cache@master
        with:
          path:        "$HOME/sccache"
          key:         sccache-${{ env['cache_hash'] }}
      - name:          Install & start sccache for ${{ matrix.platform }}
        shell:         pwsh
        run:           pwsh .github/workflows/sccache.ps1 ${{ runner.os}}
      - name:          Sccache statistics
        run:           sccache --show-stats
      - name:          Building ${{ matrix.platform }}-${{ matrix.toolchain }}
        uses:          actions-rs/cargo@master
        if:            matrix.toolchain == 'nightly &&'${{ always() }} #Allow failure for nightly
        with:
          command:     build
          toolchain:   ${{ matrix.toolchain }}
          args:        --verbose --all #--release
      - name:          Stop sccache
        if:            always()
        run:           sccache --stop-server
#      - name:          Prepare artifact's
#        run:           .github/workflows/prepare_artifacts.sh ""
#        shell:         bash
#      - name:          Upload artifact's
#        uses:          actions/upload-artifact@v1
#        with:
#          name:        ${{ matrix.platform }}.${{ matrix.toolchain }}.${{ matrix.compiler }}.zip
#          path:        artifacts/
