name:                  Test Suite

on:
  pull_request:
  push:
    branches:
      - master
      - stable
    tags:
      - v*
    paths-ignore:
      - 'README.md'
jobs:
## Test stage
  test:
    name:              Test
    strategy:
      matrix:
        platform:
          - ubuntu-latest
        #  - macos-latest
        #  - windows-latest
        toolchain:
          - stable
          #- beta
          - nightly
        compiler:
          #- clang
          - gcc
    runs-on:           ${{ matrix.platform }}
    env:
      RUST_BACKTRACE:  full
      SCCACHE_DIR:     "~/sccache"
      SCCACHE_CACHE_SIZE: "1G"
    steps:
      - name:          Set default compiler
        if:            matrix.compiler == 'clang' && matrix.platform != 'windows-latest'
        run: |
          echo ::set-env name=CC::clang
          echo ::set-env name=CXX::clang++
      - name:          Install sudo for windows #https://github.com/actions/virtual-environments/issues/572
        if: matrix.platform == 'windows-latest'
        run: choco install sudo
      - name:          Install LLVM for Windows
        if:            matrix.platform == 'windows-latest'  && matrix.compiler == 'clang'
        run:           |
          choco install llvm
          echo ::set-env name=CC::clang-cl.exe --enable-64-bit
          echo ::set-env name=CXX::clang-cl.exe --enable-64-bit
          refreshenv
      - name:          Checkout sources & submodules
        uses:          actions/checkout@master
        with:
          fetch-depth: 5
          submodules:  recursive
      - name:          Install toolchain
        uses:          actions-rs/toolchain@master
        with:
          profile:     minimal
          toolchain:   ${{ matrix.toolchain }}
          components:  clippy, rustfmt
          override:    true
      - name:          Install nightly toolchain & wasm32
        uses:          actions-rs/toolchain@master
        with:
          profile:     minimal
          toolchain:   nightly
          target:      wasm32-unknown-unknown
          components:  clippy, rustfmt
          override:    true
      - name:          Set cache_hash ENV and prepare cache dir's
        run:           |
          echo ::set-env name=cache_hash::${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.compiler }}-${{ hashFiles('**/Cargo.toml') }}
          mkdir -p ~/sccache
        shell:         bash
      - name:          Cache cargo build
        uses:          actions/cache@master
        with:
          path:        target
          key:         cargo-target-${{ env['cache_hash'] }}
      - name:          Cache sccache
        uses:          actions/cache@master
        with:
          path:        "~/sccache"
          key:         sccache-${{ env['cache_hash'] }}
      - name:          Install & start sccache for ${{ matrix.platform }}

        shell:         pwsh
        run:           pwsh .github/workflows/sccache.ps1 ${{ runner.os}}
      - name:          Sccache statistics
        run:           sccache --show-stats
      - name:          Style check ${{ matrix.platform }} rust-${{ matrix.toolchain }}
        uses:          actions-rs/cargo@master
        with:
          command:     fmt
          toolchain:   ${{ matrix.toolchain }}
          args:        --all -- --check
      - name:          Testing ${{ matrix.platform }} rust-${{ matrix.toolchain }}
        uses:          actions-rs/cargo@master
        if:            matrix.toolchain == 'nightly &&'${{ always() }} #Allow failure for nightly
        with:
          command:     test
          toolchain:   ${{ matrix.toolchain }}
          args:        --all  --verbose
      - name:          Stop sccache
        if:            always()
        run:           sccache --stop-server
