stages:
  - lint
  - check
  - test
  - build
  - publish

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

variables:                         &default-vars
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       100
  CARGO_INCREMENTAL:               0
  ARCH:                            "x86_64"
  CI_IMAGE:                        "paritytech/bridges-ci:latest"
  RUST_BACKTRACE:                  full

default:
  cache:                           {}

.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - artifacts/

.kubernetes-build:                 &kubernetes-build
  tags:
    - kubernetes-parity-build
  interruptible:                   true

.docker-env:                       &docker-env
  image:                           "${CI_IMAGE}"
  before_script:
    - rustup show
    - cargo --version
    - sccache -s
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  interruptible:                   true
  tags:
    - linux-docker

.pushes:                           &pushes
  # these jobs run only on PRs
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
      changes:
        - '**.md'
        - diagrams/*
        - docs/*
      when:                        never
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH

#### stage:                        lint

clippy-nightly:
  stage:                           lint
  <<:                              *docker-env
  <<:                              *pushes
  variables:
    RUSTFLAGS:                     "-D warnings"
  script:
    - cargo +nightly clippy --all-targets
  # FIXME: debug
  allow_failure:                   true

fmt:
  stage:                           lint
  <<:                              *docker-env
  <<:                              *pushes
  script:
    - cargo fmt --all -- --check

spellcheck:
  stage:                           lint
  <<:                              *docker-env
  <<:                              *pushes
  script:
    - cargo spellcheck check -m 1 -vv $(find modules/currency-exchange/src -name "*.rs")

#### stage:                        check

check:
  stage:                           check
  <<:                              *docker-env
  <<:                              *pushes
  script:                          &check-script
    - cargo check --verbose --workspace
    # Check Rialto benchmarks runtime
    - cargo check -p rialto-runtime --features runtime-benchmarks --verbose
    # Check Millau benchmarks runtime
    - cargo check -p millau-runtime --features runtime-benchmarks --verbose

check-nightly:
  stage:                           check
  <<:                              *docker-env
  <<:                              *pushes
  script:
    - rustup default nightly
    - *check-script

#### stage:                        test

test:
  stage:                           test
  <<:                              *docker-env
  <<:                              *pushes
  script:                          &test-script
    - cargo test --verbose --workspace

test-nightly:
  stage:                           test
  <<:                              *docker-env
  <<:                              *pushes
  script:
    - rustup default nightly
    - *test-script

deny:
  stage:                           test
  <<:                              *docker-env
  <<:                              *pushes
  <<:                              *collect-artifacts
  script:
    - cargo deny check advisories --hide-inclusion-graph
    - cargo deny check bans licenses sources --hide-inclusion-graph
  after_script:
    - mkdir -p ./artifacts
    - echo "___Complete logs can be found in the artifacts___"
    - cargo deny check advisories 2> advisories.log
    - cargo deny check bans licenses sources 2> bans_licenses_sources.log

#### stage:                        build

build:
  stage:                           build
  <<:                              *docker-env
  <<:                              *pushes
  <<:                              *collect-artifacts
  # master
  script:                          &build-script
    - cargo build --release --verbose --workspace
    # Prepare artifacts
    - mkdir -p ./artifacts
    - strip ./target/release/rialto-bridge-node
    - mv -v ./target/release/rialto-bridge-node ./artifacts/
    - strip ./target/release/millau-bridge-node
    - mv -v ./target/release/millau-bridge-node ./artifacts/
    - strip ./target/release/ethereum-poa-relay
    - mv -v ./target/release/ethereum-poa-relay ./artifacts/
    - strip ./target/release/substrate-relay
    - mv -v ./target/release/substrate-relay ./artifacts/
    - mv -v ./deployments/local-scripts/bridge-entrypoint.sh ./artifacts/

build-nightly:
  stage:                           build
  <<:                              *docker-env
  <<:                              *pushes
  <<:                              *collect-artifacts
  # master
  script:
    - rustup default nightly
    - *build-script

#### stage:                        publish

.build-push-image:                 &build-push-image
  <<:                              *kubernetes-build
  image:                           quay.io/buildah/stable
  variables:                       &image-variables
    GIT_STRATEGY:                  none
    DOCKERFILE:                    ci.Dockerfile
    IMAGE_NAME:                    docker.io/parity/$CI_JOB_NAME
  needs:
    - job:                         build
      artifacts:                   true
  before_script:                   &check-versions
    - if [[ "${CI_COMMIT_TAG}" ]]; then
        VERSION=${CI_COMMIT_TAG}
      elif [[ "${CI_COMMIT_REF_NAME}" ]]; then
        VERSION=$(echo ${CI_COMMIT_REF_NAME} | sed -r 's#/+#-#g')
      fi
    - echo "Effective tags = ${VERSION} sha-${CI_COMMIT_SHORT_SHA} latest"
  script:
    - test "$Docker_Hub_User_Parity" -a "$Docker_Hub_Pass_Parity" ||
        ( echo "no docker credentials provided"; exit 1 )
    - cd ./artifacts
    - buildah bud
        --format=docker
        --build-arg VCS_REF="${CI_COMMIT_SHORT_SHA}"
        --build-arg HEALTH="${HEALTH}"
        --build-arg BUILD_DATE="$(date +%d-%m-%Y)"
        --build-arg PROJECT="${IMAGE_NAME}"
        --build-arg VERSION="${VERSION}"
        --tag "$IMAGE_NAME:$VERSION"
        --tag "$IMAGE_NAME:sha-${CI_COMMIT_SHORT_SHA}"
        --tag "$IMAGE_NAME:latest"
        --file ${DOCKERFILE} .
    # The job will success only on the protected branch
    - echo "$Docker_Hub_Pass_Parity" |
        buildah login --username "$Docker_Hub_User_Parity" --password-stdin docker.io
    - buildah info
    - buildah push --format=v2s2 "$IMAGE_NAME:$VERSION"
    - buildah push --format=v2s2 "$IMAGE_NAME:sha-${CI_COMMIT_SHORT_SHA}"
    - buildah push --format=v2s2 "$IMAGE_NAME:latest"
  after_script:
    - buildah logout "$IMAGE_NAME"

rialto-bridge-node:
  stage:                           publish
  <<:                              *build-push-image
  variables:
    <<:                            *image-variables
    HEALTH:                        http://localhost:9933/health

millau-bridge-node:
  stage:                           publish
  <<:                              *build-push-image
  variables:
    <<:                            *image-variables
    HEALTH:                        http://localhost:9933/health

ethereum-poa-relay:
  stage:                           publish
  <<:                              *build-push-image
  variables:
    <<:                            *image-variables
    HEALTH:                        http://localhost:9616/metrics

substrate-relay:
  stage:                           publish
  <<:                              *build-push-image
  variables:
    <<:                            *image-variables
    HEALTH:                        http://localhost:9616/metrics
