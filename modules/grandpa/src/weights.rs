// Copyright 2021 Parity Technologies (UK) Ltd.
// This file is part of Parity Bridges Common.

// Parity Bridges Common is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity Bridges Common is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity Bridges Common.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_bridge_grandpa
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-03-25, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/rialto-bridge-node
// benchmark
// --chain
// dev
// --execution
// wasm
// --extrinsic
// *
// --pallet
// pallet_bridge_grandpa
// --wasm-execution
// compiled
// --steps
// 50
// --repeat
// 20
// --output
// ./grandpa-template.txt
// --raw

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn submit_finality_proof(s: u32, p: u32) -> Weight;
	fn submit_finality_proof_on_single_fork(s: u32) -> Weight;
	fn submit_finality_proof_on_many_forks(p: u32) -> Weight;
	fn find_scheduled_change(n: u32) -> Weight;
	fn read_write_authority_sets(n: u32) -> Weight;
	fn write_authority_sets(n: u32) -> Weight;
}

/// Weight functions for pallet_bridge_grandpa.
pub struct RialtoWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for RialtoWeight<T> {
	fn submit_finality_proof(s: u32, p: u32) -> Weight {
		(0 as Weight)
			// Standard Error: 6_809_000
			.saturating_add((3_309_266_000 as Weight).saturating_mul(s as Weight))
			// Standard Error: 1_304_000
			.saturating_add((784_047_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn submit_finality_proof_on_single_fork(s: u32) -> Weight {
		(189_984_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((13_114_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn submit_finality_proof_on_many_forks(p: u32) -> Weight {
		(0 as Weight)
			// Standard Error: 913_000
			.saturating_add((138_805_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn find_scheduled_change(n: u32) -> Weight {
		(701_000 as Weight)
			// Standard Error: 0
			.saturating_add((8_000 as Weight).saturating_mul(n as Weight))
	}
	fn read_write_authority_sets(n: u32) -> Weight {
		(7_061_000 as Weight)
			// Standard Error: 0
			.saturating_add((228_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn write_authority_sets(n: u32) -> Weight {
		(3_106_000 as Weight)
			// Standard Error: 0
			.saturating_add((97_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn submit_finality_proof(s: u32, p: u32) -> Weight {
		(0 as Weight)
			// Standard Error: 6_809_000
			.saturating_add((3_309_266_000 as Weight).saturating_mul(s as Weight))
			// Standard Error: 1_304_000
			.saturating_add((784_047_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn submit_finality_proof_on_single_fork(s: u32) -> Weight {
		(189_984_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((13_114_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn submit_finality_proof_on_many_forks(p: u32) -> Weight {
		(0 as Weight)
			// Standard Error: 913_000
			.saturating_add((138_805_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn find_scheduled_change(n: u32) -> Weight {
		(701_000 as Weight)
			// Standard Error: 0
			.saturating_add((8_000 as Weight).saturating_mul(n as Weight))
	}
	fn read_write_authority_sets(n: u32) -> Weight {
		(7_061_000 as Weight)
			// Standard Error: 0
			.saturating_add((228_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn write_authority_sets(n: u32) -> Weight {
		(3_106_000 as Weight)
			// Standard Error: 0
			.saturating_add((97_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
