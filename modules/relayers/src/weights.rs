// Copyright 2019-2021 Parity Technologies (UK) Ltd.
// This file is part of Parity Bridges Common.

// Parity Bridges Common is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity Bridges Common is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity Bridges Common.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_bridge_relayers
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MusXroom`, CPU: `13th Gen Intel(R) Core(TM) i7-13650HX`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/millau-bridge-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_bridge_relayers
// --extrinsic=*
// --wasm-execution=Compiled
// --heap-pages=4096
// --output=./modules/relayers/src/weights.rs
// --template=./.maintain/bridge-weight-template.hbs

#![allow(clippy::all)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_bridge_relayers.
pub trait WeightInfo {
	fn claim_rewards() -> Weight;
	fn increase_stake() -> Weight;
	fn decrease_stake() -> Weight;
	fn register() -> Weight;
	fn deregister() -> Weight;
	fn register_at_lane() -> Weight;
	fn deregister_at_lane() -> Weight;
	fn advance_lane_epoch() -> Weight;
	fn slash_and_deregister() -> Weight;
	fn register_relayer_reward() -> Weight;
}

/// Weights for `pallet_bridge_relayers` that are generated using one of the Bridge testnets.
///
/// Those weights are test only and must never be used in production.
pub struct BridgeWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BridgeWeight<T> {
	/// Storage: `BridgeRelayers::RelayerRewards` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RelayerRewards` (`max_values`: None, `max_size`: Some(93), added:
	/// 2568, mode: `MaxEncodedLen`)
	///
	/// Storage: `Balances::TotalIssuance` (r:1 w:0)
	///
	/// Proof: `Balances::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(8), added: 503,
	/// mode: `MaxEncodedLen`)
	///
	/// Storage: `System::Account` (r:1 w:1)
	///
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode:
	/// `MaxEncodedLen`)
	fn claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `388`
		//  Estimated: `3569`
		// Minimum execution time: 56_449 nanoseconds.
		Weight::from_parts(57_453_000, 3569)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `Balances::Reserves` (r:1 w:1)
	///
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(849), added: 3324, mode:
	/// `MaxEncodedLen`)
	fn increase_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `153`
		//  Estimated: `4314`
		// Minimum execution time: 23_818 nanoseconds.
		Weight::from_parts(24_830_000, 4314)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `Balances::Reserves` (r:1 w:1)
	///
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(849), added: 3324, mode:
	/// `MaxEncodedLen`)
	fn decrease_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `331`
		//  Estimated: `4314`
		// Minimum execution time: 26_879 nanoseconds.
		Weight::from_parts(27_588_000, 4314)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `4042`
		// Minimum execution time: 14_367 nanoseconds.
		Weight::from_parts(14_873_000, 4042)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `Balances::Reserves` (r:1 w:1)
	///
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(849), added: 3324, mode:
	/// `MaxEncodedLen`)
	fn deregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `331`
		//  Estimated: `4314`
		// Minimum execution time: 33_479 nanoseconds.
		Weight::from_parts(34_648_000, 4314)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::NextLaneRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::NextLaneRelayers` (`max_values`: None, `max_size`: Some(41002),
	/// added: 43477, mode: `MaxEncodedLen`)
	fn register_at_lane() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1340`
		//  Estimated: `44467`
		// Minimum execution time: 17_836 nanoseconds.
		Weight::from_parts(18_517_000, 44467)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::ActiveLaneRelayers` (r:1 w:0)
	///
	/// Proof: `BridgeRelayers::ActiveLaneRelayers` (`max_values`: None, `max_size`: Some(1194),
	/// added: 3669, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::NextLaneRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::NextLaneRelayers` (`max_values`: None, `max_size`: Some(41002),
	/// added: 43477, mode: `MaxEncodedLen`)
	fn deregister_at_lane() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1596`
		//  Estimated: `44467`
		// Minimum execution time: 19_315 nanoseconds.
		Weight::from_parts(19_951_000, 44467)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::ActiveLaneRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::ActiveLaneRelayers` (`max_values`: None, `max_size`: Some(1194),
	/// added: 3669, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::NextLaneRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::NextLaneRelayers` (`max_values`: None, `max_size`: Some(41002),
	/// added: 43477, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:16 w:16)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	fn advance_lane_epoch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `56725`
		//  Estimated: `49822`
		// Minimum execution time: 211_226 nanoseconds.
		Weight::from_parts(219_707_000, 49822)
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(18_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::ActiveLaneRelayers` (r:16 w:16)
	///
	/// Proof: `BridgeRelayers::ActiveLaneRelayers` (`max_values`: None, `max_size`: Some(1194),
	/// added: 3669, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::NextLaneRelayers` (r:16 w:16)
	///
	/// Proof: `BridgeRelayers::NextLaneRelayers` (`max_values`: None, `max_size`: Some(41002),
	/// added: 43477, mode: `MaxEncodedLen`)
	///
	/// Storage: `Balances::Reserves` (r:1 w:1)
	///
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(849), added: 3324, mode:
	/// `MaxEncodedLen`)
	///
	/// Storage: `System::Account` (r:1 w:1)
	///
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode:
	/// `MaxEncodedLen`)
	fn slash_and_deregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2395`
		//  Estimated: `696622`
		// Minimum execution time: 101_108 nanoseconds.
		Weight::from_parts(102_963_000, 696622)
			.saturating_add(T::DbWeight::get().reads(35_u64))
			.saturating_add(T::DbWeight::get().writes(35_u64))
	}
	/// Storage: `BridgeRelayers::RelayerRewards` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RelayerRewards` (`max_values`: None, `max_size`: Some(93), added:
	/// 2568, mode: `MaxEncodedLen`)
	fn register_relayer_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12`
		//  Estimated: `3558`
		// Minimum execution time: 4_310 nanoseconds.
		Weight::from_parts(4_589_000, 3558)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `BridgeRelayers::RelayerRewards` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RelayerRewards` (`max_values`: None, `max_size`: Some(93), added:
	/// 2568, mode: `MaxEncodedLen`)
	///
	/// Storage: `Balances::TotalIssuance` (r:1 w:0)
	///
	/// Proof: `Balances::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(8), added: 503,
	/// mode: `MaxEncodedLen`)
	///
	/// Storage: `System::Account` (r:1 w:1)
	///
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode:
	/// `MaxEncodedLen`)
	fn claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `388`
		//  Estimated: `3569`
		// Minimum execution time: 56_449 nanoseconds.
		Weight::from_parts(57_453_000, 3569)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `Balances::Reserves` (r:1 w:1)
	///
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(849), added: 3324, mode:
	/// `MaxEncodedLen`)
	fn increase_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `153`
		//  Estimated: `4314`
		// Minimum execution time: 23_818 nanoseconds.
		Weight::from_parts(24_830_000, 4314)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `Balances::Reserves` (r:1 w:1)
	///
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(849), added: 3324, mode:
	/// `MaxEncodedLen`)
	fn decrease_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `331`
		//  Estimated: `4314`
		// Minimum execution time: 26_879 nanoseconds.
		Weight::from_parts(27_588_000, 4314)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `4042`
		// Minimum execution time: 14_367 nanoseconds.
		Weight::from_parts(14_873_000, 4042)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `Balances::Reserves` (r:1 w:1)
	///
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(849), added: 3324, mode:
	/// `MaxEncodedLen`)
	fn deregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `331`
		//  Estimated: `4314`
		// Minimum execution time: 33_479 nanoseconds.
		Weight::from_parts(34_648_000, 4314)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::NextLaneRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::NextLaneRelayers` (`max_values`: None, `max_size`: Some(41002),
	/// added: 43477, mode: `MaxEncodedLen`)
	fn register_at_lane() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1340`
		//  Estimated: `44467`
		// Minimum execution time: 17_836 nanoseconds.
		Weight::from_parts(18_517_000, 44467)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::ActiveLaneRelayers` (r:1 w:0)
	///
	/// Proof: `BridgeRelayers::ActiveLaneRelayers` (`max_values`: None, `max_size`: Some(1194),
	/// added: 3669, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::NextLaneRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::NextLaneRelayers` (`max_values`: None, `max_size`: Some(41002),
	/// added: 43477, mode: `MaxEncodedLen`)
	fn deregister_at_lane() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1596`
		//  Estimated: `44467`
		// Minimum execution time: 19_315 nanoseconds.
		Weight::from_parts(19_951_000, 44467)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `BridgeRelayers::ActiveLaneRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::ActiveLaneRelayers` (`max_values`: None, `max_size`: Some(1194),
	/// added: 3669, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::NextLaneRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::NextLaneRelayers` (`max_values`: None, `max_size`: Some(41002),
	/// added: 43477, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:16 w:16)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	fn advance_lane_epoch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `56725`
		//  Estimated: `49822`
		// Minimum execution time: 211_226 nanoseconds.
		Weight::from_parts(219_707_000, 49822)
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(18_u64))
	}
	/// Storage: `BridgeRelayers::RegisteredRelayers` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RegisteredRelayers` (`max_values`: None, `max_size`: Some(577),
	/// added: 3052, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::ActiveLaneRelayers` (r:16 w:16)
	///
	/// Proof: `BridgeRelayers::ActiveLaneRelayers` (`max_values`: None, `max_size`: Some(1194),
	/// added: 3669, mode: `MaxEncodedLen`)
	///
	/// Storage: `BridgeRelayers::NextLaneRelayers` (r:16 w:16)
	///
	/// Proof: `BridgeRelayers::NextLaneRelayers` (`max_values`: None, `max_size`: Some(41002),
	/// added: 43477, mode: `MaxEncodedLen`)
	///
	/// Storage: `Balances::Reserves` (r:1 w:1)
	///
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(849), added: 3324, mode:
	/// `MaxEncodedLen`)
	///
	/// Storage: `System::Account` (r:1 w:1)
	///
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode:
	/// `MaxEncodedLen`)
	fn slash_and_deregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2395`
		//  Estimated: `696622`
		// Minimum execution time: 101_108 nanoseconds.
		Weight::from_parts(102_963_000, 696622)
			.saturating_add(RocksDbWeight::get().reads(35_u64))
			.saturating_add(RocksDbWeight::get().writes(35_u64))
	}
	/// Storage: `BridgeRelayers::RelayerRewards` (r:1 w:1)
	///
	/// Proof: `BridgeRelayers::RelayerRewards` (`max_values`: None, `max_size`: Some(93), added:
	/// 2568, mode: `MaxEncodedLen`)
	fn register_relayer_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12`
		//  Estimated: `3558`
		// Minimum execution time: 4_310 nanoseconds.
		Weight::from_parts(4_589_000, 3558)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
